{"ast":null,"code":"import { SimpleChanges, Type, ViewContainerRef } from '@angular/core';\nimport { ThemeTemplate } from 'app/components/models/theme';\nimport { BootstrapComponent } from '../themes/bootstrap/bootstrap.component';\nimport { IonicComponent } from '../themes/ionic/ionic.component';\nimport * as i0 from \"@angular/core\";\nexport let LoadDirective = /*#__PURE__*/(() => {\n  class LoadDirective {\n    constructor(viewContainerRef) {\n      this.viewContainerRef = viewContainerRef;\n    }\n    ngOnChanges(changes) {\n      var _a, _b, _c;\n      if (((_a = changes.theme) === null || _a === void 0 ? void 0 : _a.currentValue) || ((_b = changes.message) === null || _b === void 0 ? void 0 : _b.currentValue)) {\n        this.loadComponent((_c = changes.theme) === null || _c === void 0 ? void 0 : _c.currentValue);\n      }\n    }\n    loadComponent(theme) {\n      this.viewContainerRef.clear();\n      const comRef = this.viewContainerRef.createComponent(this.componentTypeFactory(theme));\n      comRef.instance.message = this.message;\n    }\n    componentTypeFactory(type) {\n      let comp;\n      if (type === ThemeTemplate.Bootstrap) comp = BootstrapComponent;else comp = IonicComponent;\n      return comp;\n    }\n  }\n  LoadDirective.ɵfac = function LoadDirective_Factory(t) {\n    return new (t || LoadDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n  };\n  LoadDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: LoadDirective,\n    selectors: [[\"\", \"appLoad\", \"\"]],\n    inputs: {\n      theme: \"theme\",\n      message: \"message\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return LoadDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}